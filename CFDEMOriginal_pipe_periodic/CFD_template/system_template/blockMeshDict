/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  2.0                                   |
|   \\  /    A nd           | Web:      http://www.OpenFOAM.org               |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
version  2.0;
format   ascii;
class       dictionary;
object      blockMeshDict;
}
// ************************************

   meshGenApp blockMesh;
   convertToMeters 1;
   vertices
   (
    ( {halfpipeRadius} {halfpipeRadius} 0.0  ) // Vertex fiveoclocksqb = 0 
    (-{halfpipeRadius} {halfpipeRadius} 0.0  ) // Vertex sevenoclocksqb = 1 
    (-{halfpipeRadius} -{halfpipeRadius} 0.0 ) // Vertex elevenoclocksqb = 2 
    ( {halfpipeRadius} -{halfpipeRadius} 0.0 ) // Vertex oneoclocksqb = 3 
   
    ( {diagonalPos} {diagonalPos} 0.0 ) // Vertex fiveoclockcb = 4 
    (-{diagonalPos} {diagonalPos} 0.0) // Vertex sevenoclockcb = 5 
    (-{diagonalPos} -{diagonalPos} 0.0) // Vertex elevenoclockcb = 6 
    ( {diagonalPos} -{diagonalPos} 0.0) // Vertex oneoclockcb = 7 

    ( {halfpipeRadius} {halfpipeRadius} {pipeLength}) // Vertex fiveoclocksqt = 8 
    (-{halfpipeRadius} {halfpipeRadius} {pipeLength}) // Vertex sevenoclocksqt = 9 
    (-{halfpipeRadius} -{halfpipeRadius} {pipeLength}) // Vertex elevenoclocksqt = 10 
    ( {halfpipeRadius} -{halfpipeRadius} {pipeLength}) // Vertex oneoclocksqt = 11 
   
    ( {diagonalPos} {diagonalPos} {pipeLength}) // Vertex fiveoclockct = 12 
    (-{diagonalPos} {diagonalPos} {pipeLength}) // Vertex sevenoclockct = 13 
    (-{diagonalPos} -{diagonalPos} {pipeLength}) // Vertex elevenoclockct = 14 
    ( {diagonalPos} -{diagonalPos} {pipeLength}) // Vertex oneoclockct = 15 
   );				

   blocks
   (
    //square block
    hex (
       2 3 0 1   
       10 11 8 9   
       )
    ({gridnumXYPart1} {gridnumXYPart1} {gridnumZ})
    simpleGrading (1 1 1)

    //slice1
    hex (
       1 0 4 5
       9 8 12 13
       )
    ({gridnumXYPart1} {gridnumXYPart2} {gridnumZ})
    simpleGrading (1 1 1)

    //slice2
    hex (
       6 2 1  5 
       14 10 9   13 
       )
    ({gridnumXYPart2} {gridnumXYPart1} {gridnumZ})
    simpleGrading (1 1 1)

   //slice3
   hex (
         6 7 3 2   
         14 15 11 10   
       )
    ({gridnumXYPart1} {gridnumXYPart2} {gridnumZ})
    simpleGrading (1 1 1)

   //slice4
   hex (
         3 7 4 0  
         11 15 12 8  
       )
    ({gridnumXYPart2} {gridnumXYPart1} {gridnumZ})
    simpleGrading (1 1 1)

   );


   //create the quarter circles
   edges
   (
    arc 4 5 (0.0 {pipeRadius} 0.0 )
    arc 5 6 (-{pipeRadius} 0.0 0.0)
    arc 6 7 (0.0 -{pipeRadius} 0.0 )
    arc 7 4 ({pipeRadius} 0.0 0.0)

    arc 12 13 (0.0 {pipeRadius} {pipeLength} )
    arc 13 14 (-{pipeRadius} 0.0 {pipeLength} )
    arc 14 15 (0.0 -{pipeRadius} {pipeLength} )
    arc 15 12 ({pipeRadius} 0.0 {pipeLength} )

   );

   boundary
   (

    pipewall{
	type wall;
	faces     (
	     (5 4 12 13)
	     (5 13 14 6)
	     (6 14 15 7)
	     (7 15 12 4)
	    );
	}
    inlet{
	type cyclic;
	neighbourPatch outlet;
	faces    (
	     (0 3 2 1)
	     (0 4 7 3)
	     (4 0 1 5)
	     (1 2 6 5)
	     (3 7 6 2)
	    );
	}
    outlet{
	type cyclic;
	neighbourPatch inlet;
	faces    (
	     (8 11 10 9)
	     (8 12 15 11)
	     (12 8 9 13)
	     (9 10 14 13)
	     (11 15 14 10)
	    );
	}
);

mergePatchPairs
(
);
